#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Telegram Bot –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
"""

import os
import sys
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import Database
from scheduler import MessageScheduler

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telethon
try:
    from telethon import TelegramClient, errors
    TELETHON_AVAILABLE = True
except ImportError:
    TELETHON_AVAILABLE = False
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º –±–µ–∑ –±–æ—Ç–∞ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
    print("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install telethon")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHANNEL_ID = os.getenv("TARGET_CHANNEL_ID")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "3"))

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telethon
TELEGRAM_API_ID = os.getenv("TELEGRAM_API_ID")
TELEGRAM_API_HASH = os.getenv("TELEGRAM_API_HASH")
TELEGRAM_PHONE = os.getenv("TELEGRAM_PHONE")

if not BOT_TOKEN:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN)")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
telethon_client = None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    keyboard = [
        [KeyboardButton("üîë –ö–ª—é—á-—Å–ª–æ–≤–∞"), KeyboardButton("üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–∞")],
        [KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"), KeyboardButton("üë• –ì—Ä—É–ø–ø—ã"), KeyboardButton("üí¨ –î–∏–∞–ª–æ–≥–∏")],
        [KeyboardButton("üü¢ –ò–≥–Ω–æ—Ä –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")],
        [KeyboardButton("üë§ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üë§")],
        [KeyboardButton("üì£ –ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì£")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_status_keyboard(is_running):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º."""
    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    keyboard = [
        [KeyboardButton(status)],
        [KeyboardButton("üì¢ –ö–∞–Ω–∞–ª—ã"), KeyboardButton("üë• –ì—Ä—É–ø–ø—ã"), KeyboardButton("üí¨ –î–∏–∞–ª–æ–≥–∏")],
        [KeyboardButton("üü¢ –ò–≥–Ω–æ—Ä –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")],
        [KeyboardButton("üîë –ö–ª—é—á-—Å–ª–æ–≤–∞"), KeyboardButton("üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–∞")],
        [KeyboardButton("üë§ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üë§")],
        [KeyboardButton("üì£ –ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì£")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_keywords_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."""
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")],
        [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ ‚ùå")],
        [KeyboardButton("üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ üîÑ")],
        [KeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ üìã")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_stopwords_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏."""
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–æ")],
        [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ ‚ùå")],
        [KeyboardButton("üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ üîÑ")],
        [KeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ üìã")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_channels_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏."""
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")],
        [KeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")],
        [KeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å Telethon")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å "
        "–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.",
        reply_markup=get_status_keyboard(scheduler and scheduler.is_running)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
    )
    await update.message.reply_text(help_text, reply_markup=get_status_keyboard(scheduler and scheduler.is_running))

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    try:
        channels = await db.get_channels()
        keywords = await db.get_keywords()
        stopwords = await db.get_stopwords()
        
        # –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
        parser_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if scheduler and scheduler.is_running else "‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        status_text = (
            "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
            f"üîë –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}\n"
            f"üö´ –°—Ç–æ–ø-—Å–ª–æ–≤: {len(stopwords)}\n"
            f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} –º–∏–Ω.\n"
            f"üìç –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {TARGET_CHANNEL_ID}\n"
            f"ü§ñ –ü–∞—Ä—Å–µ—Ä: {parser_status}\n"
        )
        
        account_text = f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {update.effective_user.id}\n"
        notification_text = f"üì£ ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n{TARGET_CHANNEL_ID}\n"
        keyword_count = f"üîë –ö–æ–ª-–≤–æ –∫–ª—é—á-—Å–ª–æ–≤: {len(keywords)}\n"
        stopword_count = f"üö´ –ö–æ–ª-–≤–æ —Å—Ç–æ–ø-—Å–ª–æ–≤: {len(stopwords)}"
        
        full_text = f"{status_text}\n{account_text}{notification_text}{keyword_count}{stopword_count}"
        
        await update.message.reply_text(full_text, reply_markup=get_status_keyboard(scheduler and scheduler.is_running))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def handle_keyboard_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    text = update.message.text
    
    if text == "üîë –ö–ª—é—á-—Å–ª–æ–≤–∞":
        await show_keywords(update, context)
    elif text == "üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–∞":
        await show_stopwords(update, context)
    elif text == "üì¢ –ö–∞–Ω–∞–ª—ã":
        await show_channels(update, context)
    elif text == "üë• –ì—Ä—É–ø–ø—ã":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", 
                                      reply_markup=get_status_keyboard(scheduler and scheduler.is_running))
    elif text == "üí¨ –î–∏–∞–ª–æ–≥–∏":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                                      reply_markup=get_status_keyboard(scheduler and scheduler.is_running))
    elif text == "üü¢ –ò–≥–Ω–æ—Ä –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π":
        await update.message.reply_text("–û–ø—Ü–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞.",
                                      reply_markup=get_status_keyboard(scheduler and scheduler.is_running))
    elif text == "üë§ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üë§":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                                      reply_markup=get_status_keyboard(scheduler and scheduler.is_running))
    elif text == "üì£ –ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üì£":
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {TARGET_CHANNEL_ID}\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID.",
                                      reply_markup=get_status_keyboard(scheduler and scheduler.is_running))
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_status_keyboard(scheduler and scheduler.is_running))
    elif text == "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç":
        await stop_parsing_keyboard(update, context)
    elif text == "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω":
        await start_parsing_keyboard(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ":
        context.user_data["waiting_for"] = "keyword"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª: +\n–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–¥–∞–º+–∞–π—Ñ–æ–Ω")
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–æ":
        context.user_data["waiting_for"] = "stopword"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
        context.user_data["waiting_for"] = "channel"
        await update.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
            "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n"
            "- –ß–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100...)\n"
            "- –ò–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel_name)\n\n"
            "‚ùóÔ∏è –í–∞–∂–Ω–æ: –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∏–º—è (@username) "
            "–≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å Telethon (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ)"
        )
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª":
        channels = await db.get_channels()
        if not channels:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.", reply_markup=get_channels_keyboard())
            return
            
        keyboard = []
        for channel in channels:
            keyboard.append([InlineKeyboardButton(f"ID: {channel['channel_id']}", callback_data=f"del_channel_{channel['channel_id']}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    elif text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤":
        await list_channels(update, context)
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ ‚ùå":
        if "keyword_menu" in context.user_data:
            keyboard = [
                [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="confirm_delete_all_keywords")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_all")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞?", reply_markup=reply_markup)
        elif "stopword_menu" in context.user_data:
            keyboard = [
                [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞", callback_data="confirm_delete_all_stopwords")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_all")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Ç–æ–ø-—Å–ª–æ–≤–∞?", reply_markup=reply_markup)
    elif text == "üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ üîÑ":
        await update.message.reply_text("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", 
                                      reply_markup=get_status_keyboard(scheduler and scheduler.is_running))
    elif text == "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ üìã":
        if "keyword_menu" in context.user_data:
            keywords = await db.get_keywords()
            if not keywords:
                await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.", reply_markup=get_keywords_keyboard())
                return
                
            keywords_text = "\n".join(keywords)
            await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:\n\n{keywords_text}", reply_markup=get_keywords_keyboard())
        elif "stopword_menu" in context.user_data:
            stopwords = await db.get_stopwords()
            if not stopwords:
                await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –ø—É—Å—Ç.", reply_markup=get_stopwords_keyboard())
                return
                
            stopwords_text = "\n".join(stopwords)
            await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤:\n\n{stopwords_text}", reply_markup=get_stopwords_keyboard())
    elif text == "üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Telethon
        await get_available_channels(update, context)
    elif text == "üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å Telethon":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç
        if await is_telethon_authorized():
            me = await telethon_client.get_me()
            await update.message.reply_text(
                f"‚úÖ Telethon —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!\n"
                f"–ê–∫–∫–∞—É–Ω—Ç: {me.first_name} {getattr(me, 'last_name', '')} (@{me.username})",
                reply_markup=get_channels_keyboard()
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await send_code_request(update, context)

async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥."""
    if "waiting_for" not in context.user_data:
        await handle_keyboard_button(update, context)
        return
        
    waiting_for = context.user_data["waiting_for"]
    text = update.message.text
    
    if waiting_for == "keyword":
        try:
            await db.add_keyword(text)
            await update.message.reply_text(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=get_keywords_keyboard())
            context.user_data.pop("waiting_for", None)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_keywords_keyboard())
            context.user_data.pop("waiting_for", None)
    elif waiting_for == "stopword":
        try:
            await db.add_stopword(text)
            await update.message.reply_text(f"‚úÖ –°—Ç–æ–ø-—Å–ª–æ–≤–æ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=get_stopwords_keyboard())
            context.user_data.pop("waiting_for", None)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_stopwords_keyboard())
            context.user_data.pop("waiting_for", None)
    elif waiting_for == "channel":
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Å '@' (–∏–º—è –∫–∞–Ω–∞–ª–∞)
            if text.startswith('@'):
                channel_id = text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∫–∞–∫ –µ—Å—Ç—å
                await db.add_channel(channel_id, text)
                await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", reply_markup=get_channels_keyboard())
                context.user_data.pop("waiting_for", None)
            else:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–π ID
                try:
                    channel_id = int(text)
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å @", reply_markup=get_channels_keyboard())
                    context.user_data.pop("waiting_for", None)
                    return
                
                await db.add_channel(channel_id)
                await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", reply_markup=get_channels_keyboard())
                context.user_data.pop("waiting_for", None)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_channels_keyboard())
            context.user_data.pop("waiting_for", None)
    elif waiting_for == "telethon_code":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telethon
        code = text.strip()
        success = await sign_in_with_code(update, context, code)
        if success:
            context.user_data.pop("waiting_for", None)
            await update.message.reply_text("‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã'", reply_markup=get_channels_keyboard())
    elif waiting_for == "telethon_2fa":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è 2FA
        password = text.strip()
        success = await sign_in_with_2fa(update, context, password)
        if success:
            context.user_data.pop("waiting_for", None)
            await update.message.reply_text("‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã'", reply_markup=get_channels_keyboard())
    else:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        context.user_data.pop("waiting_for", None)
        await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("del_channel_"):
        channel_id = int(data.replace("del_channel_", ""))
        try:
            await db.remove_channel(channel_id)
            await query.edit_message_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
    elif data.startswith("del_keyword_"):
        keyword = data.replace("del_keyword_", "")
        try:
            await db.remove_keyword(keyword)
            await query.edit_message_text(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
    elif data.startswith("del_stopword_"):
        stopword = data.replace("del_stopword_", "")
        try:
            await db.remove_stopword(stopword)
            await query.edit_message_text(f"‚úÖ –°—Ç–æ–ø-—Å–ª–æ–≤–æ '{stopword}' —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: {e}")
    elif data == "confirm_delete_all_keywords":
        try:
            keywords = await db.get_keywords()
            for keyword in keywords:
                await db.remove_keyword(keyword)
            await query.edit_message_text("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã.")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
    elif data == "confirm_delete_all_stopwords":
        try:
            stopwords = await db.get_stopwords()
            for stopword in stopwords:
                await db.remove_stopword(stopword)
            await query.edit_message_text("‚úÖ –í—Å–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã.")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤: {e}")
    elif data == "cancel_delete_all":
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def show_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
    context.user_data["keyword_menu"] = True
    context.user_data.pop("stopword_menu", None)
    
    try:
        keywords = await db.get_keywords()
        
        if not keywords:
            await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.", reply_markup=get_keywords_keyboard())
            return
        
        keyboard = []
        for keyword in keywords:
            keyboard.append([InlineKeyboardButton(f"‚ùå {keyword}", callback_data=f"del_keyword_{keyword}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:", reply_markup=reply_markup)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keywords_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_keywords_keyboard())

async def show_stopwords(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤."""
    context.user_data["stopword_menu"] = True
    context.user_data.pop("keyword_menu", None)
    
    try:
        stopwords = await db.get_stopwords()
        
        if not stopwords:
            await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –ø—É—Å—Ç.", reply_markup=get_stopwords_keyboard())
            return
        
        keyboard = []
        for stopword in stopwords:
            keyboard.append([InlineKeyboardButton(f"‚ùå {stopword}", callback_data=f"del_stopword_{stopword}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤:", reply_markup=reply_markup)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_stopwords_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_stopwords_keyboard())

async def show_channels(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏."""
    await update.message.reply_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=get_channels_keyboard())

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    try:
        channels = await db.get_channels()
        
        if not channels:
            await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.", reply_markup=get_channels_keyboard())
            return
        
        channels_text = "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        for i, channel in enumerate(channels, 1):
            channels_text += f"{i}. ID: {channel['channel_id']}"
            if channel['name']:
                channels_text += f" ({channel['name']})"
            channels_text += "\n"
        
        await update.message.reply_text(channels_text, reply_markup=get_channels_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_channels_keyboard())

async def start_parsing_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    global scheduler
    
    if scheduler and scheduler.is_running:
        await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω", reply_markup=get_status_keyboard(True))
        return
        
    try:
        if not scheduler:
            scheduler = MessageScheduler(
                db, 
                TARGET_CHANNEL_ID, 
                CHECK_INTERVAL, 
                "",
                telethon_client=telethon_client
            )
            
        scheduler.start()
        await update.message.reply_text("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", reply_markup=get_status_keyboard(True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_status_keyboard(False))

async def stop_parsing_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    global scheduler
    
    if not scheduler or not scheduler.is_running:
        await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω", reply_markup=get_status_keyboard(False))
        return
        
    try:
        scheduler.stop()
        await update.message.reply_text("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=get_status_keyboard(False))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_status_keyboard(True))

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        connected = await db.connect()
        if not connected:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –º–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await migrate_database_schema()
            
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def migrate_database_schema():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with db.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø channel_id –≤ —Ç–∞–±–ª–∏—Ü–µ channels
            table_info = await conn.fetch("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'channels' AND column_name = 'channel_id'
            """)
            
            if table_info and table_info[0]['data_type'] == 'bigint':
                logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ channel_id —Å BIGINT –Ω–∞ TEXT")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π
                await conn.execute("""
                    CREATE TABLE channels_temp (
                        id SERIAL PRIMARY KEY,
                        channel_id TEXT UNIQUE NOT NULL,
                        name TEXT,
                        is_active BOOLEAN DEFAULT TRUE
                    )
                """)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
                await conn.execute("""
                    INSERT INTO channels_temp (id, channel_id, name, is_active)
                    SELECT id, CAST(channel_id AS TEXT), name, is_active FROM channels
                """)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                await conn.execute("DROP TABLE channels")
                await conn.execute("ALTER TABLE channels_temp RENAME TO channels")
                
                logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –¥–∞–∂–µ –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å

async def main_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not await init_database():
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
    await init_telethon()
        
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await application.updater.start_polling()
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
    global scheduler
    if not scheduler:
        scheduler = MessageScheduler(
            db, 
            TARGET_CHANNEL_ID, 
            CHECK_INTERVAL, 
            "",
            telethon_client=telethon_client
        )
        
    scheduler.start()
    logger.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
    
    # –ñ–¥–µ–º –≤–µ—á–Ω–æ –∏–ª–∏ –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        stop_event = asyncio.Event()
        await stop_event.wait()
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        await application.stop()
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await db.close()
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
        if telethon_client:
            await telethon_client.disconnect()

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main_async())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telethon
async def init_telethon():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç Telethon."""
    global telethon_client
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telethon
    if not TELEGRAM_API_ID or not TELEGRAM_API_HASH or not TELEGRAM_PHONE:
        logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telethon –≤ .env —Ñ–∞–π–ª–µ")
        return None
        
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API_ID –≤ —á–∏—Å–ª–æ
        api_id = int(TELEGRAM_API_ID)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        telethon_client = TelegramClient(
            'telegram_parser_session', 
            api_id, 
            TELEGRAM_API_HASH,
            device_model="Windows Desktop",
            system_version="4.16.30-vxCUSTOM",
            app_version="1.0.0"
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await telethon_client.connect()
        
        logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return telethon_client
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
        return None

async def is_telethon_authorized():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç Telethon."""
    global telethon_client
    
    if not telethon_client:
        telethon_client = await init_telethon()
        
    if not telethon_client:
        return False
        
    try:
        return await telethon_client.is_user_authorized()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
        return False

async def send_code_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telethon."""
    global telethon_client
    
    if not telethon_client:
        telethon_client = await init_telethon()
        
    if not telethon_client:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telethon –∫–ª–∏–µ–Ω—Ç.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ:\n"
            "TELEGRAM_API_ID=...\n"
            "TELEGRAM_API_HASH=...\n"
            "TELEGRAM_PHONE=..."
        )
        return
        
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥
        await telethon_client.send_code_request(TELEGRAM_PHONE)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        context.user_data["waiting_for"] = "telethon_code"
        
        await update.message.reply_text(
            f"üì± –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {TELEGRAM_PHONE}.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")

async def sign_in_with_code(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –≤ Telethon —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞."""
    global telethon_client
    
    if not telethon_client:
        await update.message.reply_text("‚ùå Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return False
        
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –∫–æ–¥–æ–º
        await telethon_client.sign_in(TELEGRAM_PHONE, code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if await telethon_client.is_user_authorized():
            me = await telethon_client.get_me()
            await update.message.reply_text(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
                f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {getattr(me, 'last_name', '')} (@{me.username})"
            )
            return True
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return False
            
    except errors.SessionPasswordNeededError:
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        context.user_data["waiting_for"] = "telethon_2fa"
        await update.message.reply_text("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return False
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

async def sign_in_with_2fa(update: Update, context: ContextTypes.DEFAULT_TYPE, password: str):
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –≤ Telethon —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–æ–ª—è 2FA."""
    global telethon_client
    
    if not telethon_client:
        await update.message.reply_text("‚ùå Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return False
        
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –ø–∞—Ä–æ–ª–µ–º 2FA
        await telethon_client.sign_in(password=password)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if await telethon_client.is_user_authorized():
            me = await telethon_client.get_me()
            await update.message.reply_text(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
                f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {getattr(me, 'last_name', '')} (@{me.username})"
            )
            return True
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return False
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å 2FA: {e}")
        return False

async def get_available_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Telethon."""
    global telethon_client
    
    if not telethon_client:
        telethon_client = await init_telethon()
        
    if not telethon_client:
        await update.message.reply_text("‚ùå Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await is_telethon_authorized():
        await update.message.reply_text(
            "‚ùå Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å Telethon' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        await update.message.reply_text("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        dialogs = await telethon_client.get_dialogs(limit=50)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã
        channels = [d for d in dialogs if d.is_channel]
        
        if not channels:
            await update.message.reply_text("‚ùï –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        message = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n\n"
        for i, dialog in enumerate(channels, 1):
            channel_id = dialog.id
            name = dialog.title
            message += f"{i}. ID: {channel_id} - {name}\n"
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
            if len(message) > 3500:
                await update.message.reply_text(message)
                message = ""
                
        if message:
            await update.message.reply_text(message)
            
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã
        await update.message.reply_text(
            "‚úÖ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' –∏ –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_channels_keyboard()
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")

if __name__ == "__main__":
    main() 